<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alex Day</title><link>https://www.alexday.me/</link><description>Recent content on Alex Day</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexday.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Powerlaw C++ Wrapper</title><link>https://www.alexday.me/projects/powerlaw/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.alexday.me/projects/powerlaw/</guid><description>During the course of my research this semester I needed to implement the Powerlaw Collision Avoidance model. This is a force-based model to intelligently repel agents based on the time-to-collision, or TTC. There is already an official python implementation however it does not support static obstacle avoidance. In order to implement this into my code I chose to mimic the Python ORCA Wrapper and write my own Cython wrapper for the official C++ Powerlaw model.</description></item><item><title>iCal2Notion</title><link>https://www.alexday.me/projects/ical2notion/</link><pubDate>Thu, 05 Nov 2020 22:24:55 -0500</pubDate><guid>https://www.alexday.me/projects/ical2notion/</guid><description>Earlier this year I decided that I needed some sort of hub for the tasks and events in my life. I decided at that point to go with Notion (although I have now switched to org-mode in emacs). One feature that notion is lacking is the ability to pull in events from Google Calendar into a database. I noticed that there were no tools that did this so I decided to roll my own.</description></item><item><title>Mu4e Tags to Address</title><link>https://www.alexday.me/posts/mu4e-tags-to-address/</link><pubDate>Sun, 21 Jun 2020 23:35:28 -0400</pubDate><guid>https://www.alexday.me/posts/mu4e-tags-to-address/</guid><description>I use emacs for email and org capture to keep track of my open loops. Recently I have been trying to combine the two and capture tasks that link to emails. I wanted to tag my capture items based on the inbox they fall into, :@home: for my personal and :@school for my school emails. I cobbled together this function based upon different stackexchange posts and figured I would share it here for anyone who wanted to do the same.</description></item><item><title>Stock Clustering</title><link>https://www.alexday.me/posts/stock-clustering/</link><pubDate>Wed, 20 May 2020 23:41:25 -0400</pubDate><guid>https://www.alexday.me/posts/stock-clustering/</guid><description>One of the problems in Natural Language Processing (and a problem I&amp;#39;m facing at work) is how to cluster documents into groups based on their contents. There are two broad approaches to solving the document clustering problem, supervised and unsupervised machine learning. Supervised machine learning relies on labeled data and unsupervised learning tries to categorize the data without any prior labels. These two methods both have their ups and downs that I will not go into here.</description></item><item><title>Python Docstring</title><link>https://www.alexday.me/projects/python-docstring/</link><pubDate>Mon, 18 May 2020 17:41:26 -0400</pubDate><guid>https://www.alexday.me/projects/python-docstring/</guid><description>Emacs Emacs is an incredibly extensible editor. It is one of the two major players in the unix &amp;#34;poweruser&amp;#34; editor wars. It is both configured and extended in elisp, an emacs-specific dialect of lisp. The main benefit I see of using Emacs is how I can easily add functionality I find that I need.
Python Docstring At work currently I am writing a lot of python.</description></item><item><title>GitHub Actions</title><link>https://www.alexday.me/posts/github-actions/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://www.alexday.me/posts/github-actions/</guid><description>Easy code is easy to compile and run. That has and always will be true. However, once the code you write spans across multiple classes, files, or even packages it can be hard to properly test, compile, and release this software. Continuous integration (CI) tries to solve this problem. By defining a pipeline of actions to take your code from source to product that run the same way every time.</description></item><item><title>Emacs for Email</title><link>https://www.alexday.me/posts/emacs-for-email/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.alexday.me/posts/emacs-for-email/</guid><description>Email management, when heavily abstracted, is simple. To start reading email offline on your own PC you need three programs:
Sync email to/from IMAP server (mbsync)
Manage email on your PC (mu and mu4e)
Send email (msmtp)
Once these three parts are working together then email can be downloaded, viewed, and replied to. Getting these programs working is no easy task, however.</description></item><item><title>"Clemson Acceptance"</title><link>https://www.alexday.me/news/clemson-acceptance/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.alexday.me/news/clemson-acceptance/</guid><description>Accepted into Clemson University&amp;#39;s computer science PhD program.</description></item><item><title>Emoji Summarization</title><link>https://www.alexday.me/projects/emoji/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/projects/emoji/</guid><description>For my senior year capstone project at Clarion University I worked with another student to try and summarize sentences by producing a string of emojis. We accomplished this goal through the use of vector embeddings. The initial algorithm is explained in a blog posts, as well as a novel sentence segmentation algorithm that I developed as a consequence of the project. We presented this project at the Penn York conference(slides, abstract) in Clarion and published a paper at the 2020 PACISE conference.</description></item><item><title>Undergraduate Graduated</title><link>https://www.alexday.me/news/clarion-graduation/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/news/clarion-graduation/</guid><description>Graduated cum laude from Clarion University with a B.S. in computer science and a minor in chemistry.</description></item><item><title>Dependency Tree Collapse for N-Gram Generation</title><link>https://www.alexday.me/posts/dependency-tree-collapse/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/posts/dependency-tree-collapse/</guid><description>Introduction Throughout the past semester I have been working on my senior capstone project for my CS undergraduate. The project is to create Emoji summaries for sentences and one of the integral parts of this algorithm is separating a sentence into a sequence of n-grams that represent it. In the initial algorithm, I took a naive approach of generating every single combination of n-grams, summarizing them all, and then returning the summary with the highest result.</description></item><item><title>Naive Sentence to Emoji Translation</title><link>https://www.alexday.me/posts/naive-emoji-summarization/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/posts/naive-emoji-summarization/</guid><description>Motivation My senior capstone project for my computer science degree is research focused on summarizing sentences. My group mate and I decided to try and accomplish this by converting sentences into Emoji. We think that this will produce a more information-dense string. This problem is rather similar to a plethora of different problems in computer science and other, unrelated, domains. Within computer science, it is adjacent to the Emoji prediction and Emoji embedding problems.</description></item><item><title>Bankers Algorithm</title><link>https://www.alexday.me/projects/bankers/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/projects/bankers/</guid><description>Banker&amp;#39;s Algorithm implemented in Python3 with a Flask RESTful backend and HTML/Bootstrap/JS front end. The site is hosted on Heroku at http://bankers.alexday.me.
Usage This was a project for the Operating Systems class at Clarion. This project had a specific input file format that is shown on the left hand side of the web app. This format is also shown with comments describing what each line corresponds to below.</description></item><item><title>DSML 4 Kidz</title><link>https://www.alexday.me/projects/dsml/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/projects/dsml/</guid><description>In the summer of 2019 I was lucky enough to be accepted into the University of Arizona&amp;#39;s CATVehicle REU. Over the course of 10 weeks my group mates and I developed a Domain Specific Modeling Language (DSML) aimed at providing a simple interface for 4th grade students to interact with an autonomous vehicle. This language was used to augment a robotics curriculum for over 420 students in the Tucson area.</description></item><item><title>TF-IDF and Document Summarization</title><link>https://www.alexday.me/posts/tf-idf/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.alexday.me/posts/tf-idf/</guid><description>Term Frequency-Inverse Document Frequency (commonly abbreviated as TF-IDF) is a formula commonly used in Natural Language Processing (NLP) to determine the relative importance of a word. The formula is comprised of two sub-formulas, term frequency and inverse document frequency. The basic assumption of this formula is that if a word appears more in one document and less in every other document in the corpus then it is very important to that specific document.</description></item><item><title>About</title><link>https://www.alexday.me/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.alexday.me/about/</guid><description>My name is Alex Day. I have a B.S. in computer science from Clarion University and I&amp;#39;m a currently attending Clemson University for a Ph.D. in computer science with a focus on multi-agent navigation. In the past I have involved myself in Natural Language Processing research at Clarion and JGMS Inc. and Autonomous Vehicle research at the University of Arizona. In my free time I enjoy grappling, reading, and long walks on the beach.</description></item><item><title>Oops, you are offline.</title><link>https://www.alexday.me/offline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.alexday.me/offline/</guid><description>You should try to find some Internet to browse here</description></item><item><title>Papers Published</title><link>https://www.alexday.me/papers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.alexday.me/papers/</guid><description>code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} Day, Alex, Chris Mankos, Soo Kim, and Jody Strausser. 2020. “CoNFET: An English Sentence to Emojis Translation Algorithm.” In Proceedings of the 35th Annual Spring Conference of the Pennsylvania Computer and Information Science Educators. Pennsylvania Computer Information Science Educators. Forthcoming [code] [pdf] [slides]
Day, Alex, and Soo Kim.</description></item><item><title>Talks I've Given</title><link>https://www.alexday.me/talks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.alexday.me/talks/</guid><description>code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} Day, Alex, Chris Mankos, Soo Kim, and Jody Strausser. November 2019. “Sentence Compression Using Emoji Summarization.” Penn-York Undergraduate Research Conference at Clarion University of Pennsylvania. [slides] [code]
Hum, Sam, Day, Alex, and Wagner, Riley. August 2019. “Verification and Creation of Autonomous Vehicle Trajectories for Non-Experts with Reactive Design-Time Feedback and Sensor-Based Response.</description></item></channel></rss>